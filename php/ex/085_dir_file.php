<?php

// 디렉토리 존재 여부 체크
if(is_dir("./test")) {
    echo "이미 존재하는 디렉토리\n";
}
else {
    echo "없는 디렉토리\n";
}


// 폴더=디렉토리 생성 (윈도우-폴더, 리눅스-디렉토리)
$result = mkdir("./test", 777);
// 관리자, 중간 관리자, 게스트 계정 순서. 777 - 모든 권한,  666 - 읽기 쓰기 가능,  444 - 읽기 가능

if($result) {
    echo "디렉토리 생성 성공\n";
}
else {
    echo "디렉토리 생성 실패\n";
}
// 똑같은 이름으로 생성할 수 없어서 두번 실행하면 else 출력
// 기본적으로 자주 사용하지 않음

if(!$result) {
    echo "디렉토리 생성 성공";
}
// 보통 이랗게 낫 연산자 주고 체크


// 디렉토리 삭제
$result = rmdir("./test");
if($result) {
    echo "디렉토리 삭제 성공";
}
else {
    echo "디렉토리 삭제 실패";
}
// 체크

// 디렉토리 열기 및 읽기
$open_dir = opendir("./"); // 디렉토리 열기
while($item = readdir($open_dir)) { // 대부분 비교연산자나 불리언 씀
    echo $item,"\n";
}
// 변수가 빈 값이 아니면 true로 인식. while문이 작동. 빈 값이 되면 false로 루프 빠져나옴

// 디렉토리 닫기
closedir($open_dir); // 호버 시 뜨는 void는 리턴이 없다는 뜻
// 메모리릭 일어나서 서버 정지되는 상황 주의

// --------------------------------------------------------------------------------

// 파일 오픈
// 용도(읽기만 할지, 읽기쓰기 할지) 결정

// 없는 파일 열기
$file = fopen("./999_test.php", "w");
if($file) {
    echo "파일 오픈 성공";

    // 파일에 데이터 쓰기
    fwrite($file, "글쓰기 테스트\n"); // 999_test 파일에 써짐


    // 파일 닫기
    fclose($file);
}
else {
    echo "파일 오픈 실패";
}
// 생성 따로 해야하는 디렉토리와 달리 쓰기 전용으로 열면 파일 새로 생성하면서 열림
// w 잘 안쓰고 a로 지정해서 기존 내용 보존함
// 요즘은 파일로 주고받는 경우 없고 로그 찍는 데에 이용

fwrite(fopen("./999_test.php", "a"), "글쓰기 테스트22\n"); // 편법?

// 파일 삭제
unlink("./999_test.php"); // 불리언으로 리턴. 삭제 실패하면 이후 처리 따로 해줘야 함
